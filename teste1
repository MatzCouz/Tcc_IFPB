import ast
import __future__
import tokenize
import StringIO
pfcf = __future__.print_function.compiler_flag

from ast import dump, PyCF_ONLY_AST

# Tratando comentarios 
lineNumber = 0 
comentarios = []
linhas_comentarios = []

# Tratando o resto
listaNomeVariaveis = []
listaValores = []
listaPrint = []
listaNomesFuncoes = []


class MyVisitorNameDef(ast.NodeVisitor):
    def visit_FunctionDef(self, node):
        print node.lineno # numero da linha
        listaNomesFuncoes.append(node.name)

class MyTransformerNameDef(ast.NodeTransformer):
    def visit_FunctionDef(self, node):
        return ast.FunctionDef()

class MyVisitorPrint(ast.NodeVisitor):
    def visit_Str(self, node):
        listaPrint.append(node.s)

class MyTransformerPrint(ast.NodeTransformer):
    def visit_Str(self, node):
        return ast.Str(node.s)

class MyVisitorString(ast.NodeVisitor):
    def visit_Str(self, node):
        listaValores.append(node.s)

class MyTransformerString(ast.NodeTransformer):
    def visit_Str(self, node):
        return ast.Str(node.s)

class MyVisitorNum(ast.NodeVisitor):
    def visit_Num(self, node):
        listaValores.append(node.n)

class MyTransformerNum(ast.NodeTransformer):
    def visit_Num(self, node):
        print(node.n)
        return ast.Num(node.n)

class MyVisitorName(ast.NodeVisitor):
    def visit_Name(self, node):
        listaNomeVariaveis.append(node.id)

class MyTransformerName(ast.NodeTransformer):
    def visit_Name(self, node):
        print(node.id)
        return ast.Name(node.id, self)
        
def extract(code):
    comment = None
    stringio = StringIO.StringIO(code)
    # pass in stringio.readline to generate_tokens
    for toktype, tokval, begin, end, line in tokenize.generate_tokens(stringio.readline):
        if toktype == tokenize.COMMENT:
          comentarios.append(tokenize.untokenize([(toktype, tokval)]))
          linhas_comentarios.append(lineNumber)

def d(s):
    print len(dump(compile(ast.parse(s), '<String>', 'exec', pfcf|PyCF_ONLY_AST)))
    print dump(compile(ast.parse(s), '<String>', 'exec', pfcf|PyCF_ONLY_AST))
    b = dump(compile(ast.parse(s).body[1], '<String>', 'exec', pfcf|PyCF_ONLY_AST))
    e = len(ast.parse(s).body)
    for i in range(e):
        print dump(compile(ast.parse(s).body[i], '<String>', 'exec', pfcf|PyCF_ONLY_AST))
        print dump(compile(ast.parse(s).body[i].name, '<String>', 'exec', pfcf|PyCF_ONLY_AST))
    print b
    d = ast.parse('''
x = 'wajiawjiawji'
y = 'awkoaw' 
z = 1777
''')
    print "NADA AQUI"

    for line in s.split('\n'):
      extract(line)
      global lineNumber 
      lineNumber += 1
    print comentarios
    print linhas_comentarios
      

    module = ast.parse(s)

    name_definitions = [node for node in module.body]
    for i in range(len(name_definitions)):
        MyTransformerNameDef().visit(name_definitions[i])
        MyVisitorNameDef().visit(name_definitions[i])
    print "LISTA NOMES FUNCOES"
    print listaNomesFuncoes

    function_definitions = [node for node in module.body[0].body if isinstance(node, ast.Assign)]
    for i in range(len(function_definitions)):
      
        MyTransformerString().visit(function_definitions[i])
        MyVisitorString().visit(function_definitions[i])

        MyTransformerNum().visit(function_definitions[i])
        MyVisitorNum().visit(function_definitions[i])

        MyTransformerName().visit(function_definitions[i])
        MyVisitorName().visit(function_definitions[i])

    print_definitions = [node for node in module.body[0].body if isinstance(node, ast.Print)]
    for i in range(len(print_definitions)):
        MyTransformerPrint().visit(print_definitions[i])
        MyVisitorPrint().visit(print_definitions[i])
    print listaPrint
    print "LISTA DOS NOMES DAS VARIAVEIS"
    print listaNomeVariaveis
    print "LISTA VALORES"
    print listaValores

s = '''
def testes(awkkoawkoaw): # Isso aqui e coments
    # ISSO AQUI E COMENTS
    x = 'AKOWAWOKOKA' # wkaookawokwaok
    z = 10.5
    m = 15
    print z+m
    print 'BIN OP NAO FUNFANDO'
    print 'AQUI E UM PRINT'
    return [10,20,30,40] # AQUI E UM OUTRO 
def testes2():
    x = 'MatheusCoutinho'
    return x
'''
d(s)
