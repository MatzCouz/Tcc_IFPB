# DEF -> nome e parametros de cada... 100%
# Linhas em branco e comentarios... 100%
# Variaveis -> Falta o binOp e outras coisas
# Imports ???
# tratar listas... miss!
# Posicao na linha de cada um...100%...Falta testar!
# Determinar em que cada elemento esta nas funcoes -> Buscar maneira melhor que listas simples

# Melhorar esse codigo lixo, deixar com melhor desempenho, talvez O(nlogn)

import ast
import __future__
import tokenize
import StringIO

pfcf = __future__.print_function.compiler_flag

from ast import dump, PyCF_ONLY_AST

# Tratando classes
listaClasses = []
arquivo = open('arquivoTest2.txt', 'w')
dentroDoMetodoDaClasse = True

# Tratando comentarios e linhas em branco
lineNumber = 0
comentarios = []
linhas_comentarios = []
linhas_branco = []

# Tratando o resto
auxVars = 0
listaNomeVariaveis = []
listaValores = []
listaPrint = []
listaNumLine = []

# Tratando o def
auxFunctions = 0
listaNomesFuncoes = []
listaVarsFuncoes = []


def createFile():
    arq = open('arquivoTest.txt', 'w')
    for qtdFuncoes in range(len(listaNomesFuncoes)):
        arq.write("<mth name="+listaNomesFuncoes[qtdFuncoes]+" />\n")
        for qtdParams in range(len(listaVarsFuncoes[qtdFuncoes])):
            arq.write("    <param name="+listaVarsFuncoes[qtdFuncoes][qtdParams]+"/>\n")
            print(listaVarsFuncoes[qtdFuncoes][qtdParams])
    for qtdComentarios in range(len(comentarios)):
        arq.write("<comn cntt="+comentarios[qtdComentarios]+"/>\n")
    for qtdFields in range(len(listaNomeVariaveis)):
        arq.write("<field name="+listaNomeVariaveis[qtdFields]+" cnt="+str(listaNomeVariaveis.count(listaNomeVariaveis[qtdFields]))+"/>\n")
    arq.close()

class MyVisitorVars(ast.NodeVisitor):
    def visit_Name(self, node):
        listaVarsFuncoes[auxFunctions].append(node.id)
        arquivo.write("         <param name=\""+node.id+"\""" />\n")


class MyTransformerVars(ast.NodeTransformer):
    def visit_Name(self, node):
        return ast.Name(node.id, self)


class MyVisitorNameDef(ast.NodeVisitor):
    def visit_FunctionDef(self, node):
        listaNomesFuncoes.append(node.name)
        arquivo.write("     <math name=\""+node.name+"\""" />\n")


class MyTransformerNameDef(ast.NodeTransformer):
    def visit_FunctionDef(self, node):
        return ast.FunctionDef()


class MyVisitorPrint(ast.NodeVisitor):
    def visit_Str(self, node):
        listaPrint.append(node.s)


class MyTransformerPrint(ast.NodeTransformer):
    def visit_Str(self, node):
        return ast.Str(node.s)


class MyVisitorString(ast.NodeVisitor):
    def visit_Str(self, node):
        listaValores[auxVars].append(node.s)


class MyTransformerString(ast.NodeTransformer):
    def visit_Str(self, node):
        return ast.Str(node.s)


class MyVisitorNum(ast.NodeVisitor):
    def visit_Num(self, node):
        listaValores[auxVars].append(node.n)



class MyTransformerNum(ast.NodeTransformer):
    def visit_Num(self, node):
        return ast.Num(node.n)


class MyVisitorName(ast.NodeVisitor):
    def visit_Name(self, node):
        listaNomeVariaveis.append(node.id)
        correctingPositions(node)


class MyTransformerName(ast.NodeTransformer):
    def visit_Name(self, node):
        return ast.Name(node.id, self)

class MyVisitorNameIf(ast.NodeVisitor):
    def visit_Name(self, node):
        listaNomeVariaveis.append(node.id)
        if(dentroDoMetodoDaClasse):
            arquivo.write("         <field name=\""+node.id+"\""" />\n")
        else:
            arquivo.write("     <field name=\""+node.id+"\""" />\n")




class MyTransformerNameIf(ast.NodeTransformer):
    def visit_Name(self, node):
        return ast.Name(node.id, self)

def IfInIfCatch(node):
    if isinstance(node, ast.If):
        IfinIf(node)
    global dentroDoMetodoDaClasse
    dentroDoMetodoDaClasse = True
    listaValores.append([])
    MyTransformerNameIf().visit(node)
    MyVisitorNameIf().visit(node)
    global auxVars
    auxVars += 1

def IfinIf(nodeCatch):
    nodes = [node for node in nodeCatch.body]
    for i in range(len(nodes)):
        IfInIfCatch(nodes[i])

def ForAndWhileCatch(node):
    if isinstance(node, ast.For):
        ForInFor(node)
    if isinstance(node, ast.While):
        ForInFor(node)
    global dentroDoMetodoDaClasse
    dentroDoMetodoDaClasse = True
    listaValores.append([])
    MyTransformerName().visit(node)
    MyVisitorName().visit(node)
    global auxVars
    auxVars += 1


def ForInFor(nodeCatch):
    nodes = [node for node in nodeCatch.body]
    for i in range(len(nodes)):
        ForAndWhileCatch(nodes[i])

def extract(code):
    stringio = StringIO.StringIO(code)
    for toktype, tokval, begin, end, line in tokenize.generate_tokens(stringio.readline):
        if toktype == tokenize.COMMENT:
            comentarios.append(tokenize.untokenize([(toktype, tokval)]))
            linhas_comentarios.append(lineNumber)


def correctingPositions(node):
    if len(listaNomeVariaveis) > len(listaValores):
        listaValores[auxVars].append(node.id)
        listaNomeVariaveis.pop()
    else:
        if(dentroDoMetodoDaClasse):
            arquivo.write("         <field name=\""+node.id+"\""" />\n")
        else:
            arquivo.write("     <field name=\""+node.id+"\""" />\n")


def d(s):

    for line in s.split('\n'):
        if len(line.strip()) == 0:
            linhas_branco.append(lineNumber)
        else:
            extract(line)
        global lineNumber
        lineNumber += 1

    print comentarios
    print linhas_comentarios
    print linhas_branco

    module = ast.parse(s)
    name_definitions = [node for node in module.body if isinstance(node, ast.FunctionDef)]
    classes_definitions = [node for node in module.body if isinstance(node, ast.ClassDef)]
    global dentroDoMetodoDaClasse
    dentroDoMetodoDaClasse = False
    for i in range(len(classes_definitions)):
        arquivo.write("<class name=\""+classes_definitions[i].name+"\""" />\n")
        name_definitionss = [node for node in classes_definitions[i].body if isinstance(node, ast.FunctionDef)]
        for k in range(len(name_definitionss)):
            listaVarsFuncoes.append([])

            MyTransformerNameDef().visit(name_definitionss[k])
            MyVisitorNameDef().visit(name_definitionss[k])

            MyTransformerVars().visit(name_definitionss[k].args)
            MyVisitorVars().visit(name_definitionss[k].args)

            global auxFunctions
            auxFunctions += 1


            nodes = [node for node in name_definitionss[k].body]
            global dentroDoMetodoDaClasse
            dentroDoMetodoDaClasse = True
            for i in range(len(nodes)):
                if isinstance(nodes[i], ast.Assign):
                    listaValores.append([])
                    listaNumLine.append(nodes[i].lineno)

                    MyTransformerString().visit(nodes[i])
                    MyVisitorString().visit(nodes[i])

                    MyTransformerNum().visit(nodes[i])
                    MyVisitorNum().visit(nodes[i])

                    MyTransformerName().visit(nodes[i])
                    MyVisitorName().visit(nodes[i])

                    global auxVars
                    auxVars += 1


    global dentroDoMetodoDaClasse
    dentroDoMetodoDaClasse = False
    arquivo.write("<class name=\"body\" />\n")
    for i in range(len(name_definitions)):

        listaVarsFuncoes.append([])

        MyTransformerNameDef().visit(name_definitions[i])
        MyVisitorNameDef().visit(name_definitions[i])

        MyTransformerVars().visit(name_definitions[i].args)
        MyVisitorVars().visit(name_definitions[i].args)

        global auxFunctions
        auxFunctions += 1

    print "LISTA NOMES FUNCOES"
    print listaNomesFuncoes
    print 'AQUI SAO AS VARS'
    print listaVarsFuncoes

    print dump(compile(ast.parse(s), '<String>', 'exec', pfcf|PyCF_ONLY_AST))

    nodes = [node for node in name_definitions[0].body]
    for i in range(len(nodes)):
        if isinstance(nodes[i], ast.Assign):
            global dentroDoMetodoDaClasse
            dentroDoMetodoDaClasse = True

            listaValores.append([])
            listaNumLine.append(nodes[i].lineno)

            MyTransformerString().visit(nodes[i])
            MyVisitorString().visit(nodes[i])

            MyTransformerNum().visit(nodes[i])
            MyVisitorNum().visit(nodes[i])

            MyTransformerName().visit(nodes[i])
            MyVisitorName().visit(nodes[i])


            global auxVars
            auxVars += 1

        if isinstance(nodes[i], ast.For):
            ForAndWhileCatch(nodes[i])

        if isinstance(nodes[i], ast.While):
            ForAndWhileCatch(nodes[i])

        if isinstance(nodes[i], ast.If):
            IfInIfCatch(nodes[i])



    nodes = [node for node in module.body]
    for i in range(len(nodes)):
        if isinstance(nodes[i], ast.Assign):
            global dentroDoMetodoDaClasse
            dentroDoMetodoDaClasse = False
            listaValores.append([])
            listaNumLine.append(nodes[i].lineno)

            MyTransformerString().visit(nodes[i])
            MyVisitorString().visit(nodes[i])

            MyTransformerNum().visit(nodes[i])
            MyVisitorNum().visit(nodes[i])

            MyTransformerName().visit(nodes[i])
            MyVisitorName().visit(nodes[i])

            global auxVars
            auxVars += 1
        if isinstance(nodes[i], ast.For):
            print "E UM FORRRRRRRR"

    print_definitions = [node for node in name_definitions[0].body if isinstance(node, ast.Print)]
    for i in range(len(print_definitions)):
        MyTransformerPrint().visit(print_definitions[i])
        MyVisitorPrint().visit(print_definitions[i])
    print listaPrint
    print "LISTA DOS NOMES DAS VARIAVEIS"
    print listaNumLine
    print listaNomeVariaveis
    print "LISTA VALORES"
    print listaValores


s = '''   
class Calculadora():
    
    def __init__():
        x = 10
        y = 20    
    def soma(self, a, b):
        return a + b
    def subtracao(self, a, b):
        return a - b
    def multiplicacao(self, a, b):
        return a*b
    def divisao(self, a, b):
        v = "lalal"
        return a/b
        
print 'waokwako'
def testes(param1, param2): # Isso aqui e coments
    # ISSO AQUI E COMENTS

    x = 'AKOWAWOKOKA' # wkaookawokwaok
    for i in range(10):
        testeFor += i
        for j in range(15):
            testeForInFor = 10
            for k in range(20):
                testeForInForInFor = 30
                for l in range(20):
                    testeForInForInForInFor = 50
    
    while(True):
        testeWhile += 1
        while(x!=5):
            while(True):
                while(z>5):
                    while4x = 10
                while3x = 20
            while2x = 10
        while1x = 20
        
    valorBooleanVerdade = True
    valorBooleanFalse = False
    z = 10.5
    z = 20
    z = 30
    m = 15
    if iftestando == 15 or iftestando2 == 20:
        x = 10
        dentroaquidoif = 50
        if testeIfDentroDoIf == 10:
            testeDentrodoIfDentrodoIf = 10
    else:
        dentroaquidoelse = 10
    m = z+m
    varLen = len('okwakoawko')
    binop = str(10 + 5 + 10 + 20)
    binopInt = int('15' + '20') + int('20' + '15')
    binopExtreme = str(int(int('15' + 20) - int('15' + '20')))
    varLista = [10,20,30]
    varLista.append(50)
    x = teste2()
    # AQUI E COMENTS SEM NADA

    print z+m
    print 'BIN OP NAO FUNFANDO'
    print 'AQUI E UM PRINT'


    return [10,20,30,40] # AQUI E UM OUTRO 
def testes2():
    x = 'MatheusCoutinho'
    return x
y = 10
'''
d(s)
createFile()

